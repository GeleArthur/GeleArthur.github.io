import{_ as s,c as n,o as e,ae as t}from"./chunks/framework.tuuL-SzM.js";const u=JSON.parse('{"title":"You forgot CMake again","description":"","frontmatter":{},"headers":[],"relativePath":"blog/you-forgot-cmake-again.md","filePath":"blog/you-forgot-cmake-again.md","lastUpdated":null}'),p={name:"blog/you-forgot-cmake-again.md"};function i(l,a,o,c,r,d){return e(),n("div",null,a[0]||(a[0]=[t(`<h1 id="you-forgot-cmake-again" tabindex="-1">You forgot CMake again <a class="header-anchor" href="#you-forgot-cmake-again" aria-label="Permalink to &quot;You forgot CMake again&quot;">​</a></h1><p>This is a list of handy cmake snippets. For me and YOU!!!</p><p>All <code>\${PROJECT\\_NAME}</code> means your target.</p><h1 id="create-project" tabindex="-1">Create project <a class="header-anchor" href="#create-project" aria-label="Permalink to &quot;Create project&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cmake_minimum_required(VERSION 3.29)</span></span>
<span class="line"><span>project(MyProject VERSION 1.0 LANGUAGES CXX)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>add_executable(\${PROJECT_NAME}</span></span>
<span class="line"><span>    main.cpp</span></span>
<span class="line"><span>)</span></span></code></pre></div><h1 id="cpp-version" tabindex="-1">Cpp version <a class="header-anchor" href="#cpp-version" aria-label="Permalink to &quot;Cpp version&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Global</span></span>
<span class="line"><span>set(CMAKE_CXX_STANDARD 20)</span></span>
<span class="line"><span>set(CMAKE_CXX_STANDARD_REQUIRED TRUE)</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Target</span></span>
<span class="line"><span>target_compile_features(\${PROJECT_NAME} PRIVATE cxx_std_20)</span></span></code></pre></div><h1 id="vcpkg" tabindex="-1">VCPKG <a class="header-anchor" href="#vcpkg" aria-label="Permalink to &quot;VCPKG&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>include(&quot;$ENV{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake&quot;)</span></span></code></pre></div><h1 id="show-resources-in-ide" tabindex="-1">Show resources in IDE <a class="header-anchor" href="#show-resources-in-ide" aria-label="Permalink to &quot;Show resources in IDE&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>file(GLOB_RECURSE RESOURCE_FILES &quot;\${CMAKE_CURRENT_SOURCE_DIR}/resources/*&quot;)</span></span>
<span class="line"><span>add_custom_target(Resources ALL SOURCES \${RESOURCE_FILES})</span></span></code></pre></div><h1 id="msvc-default-project-only-for-sln-files" tabindex="-1">MSVC default project. Only for .sln files <a class="header-anchor" href="#msvc-default-project-only-for-sln-files" aria-label="Permalink to &quot;MSVC default project. Only for .sln files&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>set_property(DIRECTORY \${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT \${PROJECT_NAME})</span></span></code></pre></div><h1 id="create-symlink" tabindex="-1">Create symlink <a class="header-anchor" href="#create-symlink" aria-label="Permalink to &quot;Create symlink&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>add_custom_command(TARGET \${PROJECT_NAME} POST_BUILD</span></span>
<span class="line"><span>        COMMAND \${CMAKE_COMMAND} -E create_symlink</span></span>
<span class="line"><span>        &quot;\${CMAKE_CURRENT_SOURCE_DIR}/resources&quot;</span></span>
<span class="line"><span>        &quot;$&lt;TARGET_FILE_DIR:\${PROJECT_NAME}&gt;/resources&quot;</span></span>
<span class="line"><span>)</span></span></code></pre></div><h1 id="copy-files" tabindex="-1">Copy files <a class="header-anchor" href="#copy-files" aria-label="Permalink to &quot;Copy files&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>file(GLOB_RECURSE RESOURCE_FILES &quot;\${CMAKE_CURRENT_SOURCE_DIR}/resources/*&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>foreach(RESOURCE \${RESOURCE_FILES})</span></span>
<span class="line"><span>    add_custom_command(TARGET \${PROJECT_NAME} POST_BUILD</span></span>
<span class="line"><span>    COMMAND \${CMAKE_COMMAND} -E copy \${RESOURCE}</span></span>
<span class="line"><span>    &quot;\${CMAKE_CURRENT_BINARY_DIR}/resources/&quot;)</span></span>
<span class="line"><span>endforeach(RESOURCE)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>add_custom_command(TARGET \${PROJECT_NAME} POST_BUILD</span></span>
<span class="line"><span>  COMMAND &quot;\${CMAKE_COMMAND}&quot; -E copy_directory &quot;\${CMAKE_CURRENT_SOURCE_DIR}/Data&quot; &quot;$&lt;TARGET_FILE_DIR:\${PROJECT_NAME}&gt;/Data&quot;</span></span>
<span class="line"><span>)</span></span></code></pre></div><h1 id="fetch-content" tabindex="-1">Fetch Content <a class="header-anchor" href="#fetch-content" aria-label="Permalink to &quot;Fetch Content&quot;">​</a></h1><p>When **configuring **the project download the required data.<br> Warning in the docs look at external project for the commands as they are the same</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>include(FetchContent)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>FetchContent_Declare(</span></span>
<span class="line"><span>  SDL3</span></span>
<span class="line"><span>  GIT_REPOSITORY https://github.com/libsdl-org/SDL.git</span></span>
<span class="line"><span>  GIT_TAG release-3.2.4</span></span>
<span class="line"><span>  GIT_SHALLOW TRUE</span></span>
<span class="line"><span>  GIT_PROGRESS TRUE</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>FetchContent_MakeAvailable(SDL3)</span></span></code></pre></div><h1 id="link-to-library" tabindex="-1">Link to library <a class="header-anchor" href="#link-to-library" aria-label="Permalink to &quot;Link to library&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>target_link_libraries(\${PROJECT_NAME} PUBLIC </span></span>
<span class="line"><span>    SDL3::SDL3            </span></span>
<span class="line"><span>)</span></span></code></pre></div><h1 id="external-project" tabindex="-1">External Project <a class="header-anchor" href="#external-project" aria-label="Permalink to &quot;External Project&quot;">​</a></h1><p>When the project **builds **download the required data</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>include(ExternalProject)</span></span>
<span class="line"><span>ExternalProject_Add(foobar</span></span>
<span class="line"><span>  GIT_REPOSITORY    git@github.com:FooCo/FooBar.git</span></span>
<span class="line"><span>  GIT_TAG           origin/release/1.2.3</span></span>
<span class="line"><span>)</span></span></code></pre></div><h1 id="auto-gitignore-build-folder" tabindex="-1">Auto gitignore build folder <a class="header-anchor" href="#auto-gitignore-build-folder" aria-label="Permalink to &quot;Auto gitignore build folder&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>file(WRITE \${CMAKE_CURRENT_BINARY_DIR}/.gitignore *)</span></span></code></pre></div><h1 id="turn-on-all-warnings" tabindex="-1">Turn on all warnings <a class="header-anchor" href="#turn-on-all-warnings" aria-label="Permalink to &quot;Turn on all warnings&quot;">​</a></h1><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>target_compile_options(\${PROJECT_NAME} PRIVATE</span></span>
<span class="line"><span>        $&lt;$&lt;CXX_COMPILER_ID:MSVC&gt;:/W4 /WX&gt;</span></span>
<span class="line"><span>        $&lt;$&lt;NOT:$&lt;CXX_COMPILER_ID:MSVC&gt;&gt;:-Wall -Wextra -Wpedantic -Werror&gt;</span></span>
<span class="line"><span>)</span></span></code></pre></div><h1 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to &quot;Commands&quot;">​</a></h1><h2 id="make-project" tabindex="-1">Make project <a class="header-anchor" href="#make-project" aria-label="Permalink to &quot;Make project&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>mkdir build</span></span>
<span class="line"><span>cd build</span></span>
<span class="line"><span>cmake ..</span></span>
<span class="line"><span>cmake --build .</span></span></code></pre></div><h2 id="check-settings" tabindex="-1">Check settings <a class="header-anchor" href="#check-settings" aria-label="Permalink to &quot;Check settings&quot;">​</a></h2><p><code>cmake -L</code><br><code>cmake -LH</code></p><h2 id="build-type" tabindex="-1">Build type <a class="header-anchor" href="#build-type" aria-label="Permalink to &quot;Build type&quot;">​</a></h2><p><code>-DCMAKE\\_BUILD\\_TYPE=</code> Release, RelWithDebInfo, Debug</p><h2 id="you-forgot-git-submodules" tabindex="-1">You forgot git submodules <a class="header-anchor" href="#you-forgot-git-submodules" aria-label="Permalink to &quot;You forgot git submodules&quot;">​</a></h2><p><code>git submodule update —init —recursive</code></p>`,38)]))}const g=s(p,[["render",i]]);export{u as __pageData,g as default};
